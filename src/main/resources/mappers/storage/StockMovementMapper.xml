<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ssg.meowwms.mapper.storage.StockMovementMapper">

    <!-- insertStock -->
    <insert id="insertStock" parameterType="com.ssg.meowwms.domain.storage.StockMovementVO">
        INSERT INTO Stock_Movement (product_id, user_id, status_code, request_datetime, approved_datetime, warehouse_id)
        VALUES (#{productId}, #{userId}, #{statusCode}, #{requestDatetime}, #{approvedDatetime}, #{warehouseId})
    </insert>

    <!-- updateStockMovementStatus -->
    <update id="updateStockMovementStatus" parameterType="map">
        UPDATE Stock_Movement
        SET status_code = #{statusCode}
        WHERE product_id = #{requestId}
    </update>

    <!-- updateStockMovement -->
    <update id="updateStockMovement" parameterType="map">
        UPDATE Stock_Movement
        SET request_datetime = #{requestDatetime}
        WHERE product_id = #{requestId}
    </update>

    <!-- selectAllStockMovements -->
    <select id="selectAllStockMovements" resultType="com.ssg.meowwms.domain.storage.StockMovementVO">
        SELECT * FROM Stock_Movement
    </select>

    <!-- selectMovementByStatus -->
    <select id="selectMovementByStatus" resultType="com.ssg.meowwms.domain.storage.StockMovementVO" parameterType="string">
        SELECT * FROM Stock_Movement WHERE status_code = #{statusCode}
    </select>

    <!-- selectStockMovementsById -->
    <select id="selectStockMovementsById" resultType="com.ssg.meowwms.domain.storage.StockMovementVO" parameterType="int">
        SELECT * FROM Stock_Movement WHERE product_id = #{productId}
    </select>

    <select id="searchMergedLists" parameterType="map" resultType="com.ssg.meowwms.dto.storage.MergeDTO">
        SELECT
        p.id as "product_id",
        sm.user_id as "user_id",
        p.name as "name",
        p.category_id as "category_id",
        p.price as "price",
        p.sale_price as "sale_price",
        p.quantity as "quantity",
        sm.status_code as "status_code",
        sm.request_datetime as "request_datetime",
        sm.approved_datetime as "approved_datetime",
        sm.warehouse_id as "warehouse_id"
        FROM Product p
        JOIN Stock_Movement sm ON p.id = sm.product_id
        <where>
            <if test="productId != null">
                AND p.id = #{productId}
            </if>
            <if test="userId != null">
                AND sm.user_id = #{userId}
            </if>
            <if test="productName != null and productName != ''">
                AND p.name LIKE CONCAT('%', #{productName}, '%')
            </if>
            <if test="category_id != null">
                AND p.category_id = #{category_id}
            </if>
            <if test="price != null">
                AND p.price = #{price}
            </if>
            <if test="sale_price != null">
                AND p.sale_price = #{sale_price}
            </if>
            <if test="quantity != null">
                AND p.quantity = #{quantity}
            </if>
            <if test="status_code != null and status_code != ''">
                AND sm.status_code LIKE #{status_code}
            </if>
            <if test="warehouseId != null">
                AND sm.warehouse_id = #{warehouseId}
            </if>
        </where>
    </select>


</mapper>
